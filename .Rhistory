# Train the models
revenue_models <- quarter_revenue_train |>
model(
mean = MEAN(value),
naive = NAIVE(value),
snaive = SNAIVE(value),
drift = RW(value ~ drift())
)
# forecase based on the models
revenue_forecast <-
revenue_models |>
forecast(h = 12)
# Plot the forecast against the full data
revenue_forecast |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL)
library(fpp3)
library(forecast)
View(revenue_forecast)
View(revenue_models)
rm(quarter_revenue, quarter_revenue_train, revenue_forecast, revenue_models)
regression_md <- quarter_revenue_tibble |>
model(
TSLM(value ~ trend() + season())
)
report(regression_mb) # report all the information of time series
report(regression_md) # report all the information of time series
View(quarter_revenue_tibble)
augment(regression_md) |>
ggplot(aes(x = value, y = .fitted,
color = factor(quarter(date)))) +
geom_point() +
labs(y = "Fitted",
x = "Values",
title = "GameStop Revenue in Quarter")
augment(regression_md) |>
ggplot(aes(x = value, y = .fitted,
color = factor(quarter(date)))) +
geom_point() +
labs(y = "Fitted",
x = "Values",
title = "GameStop Revenue in Quarter") +
geom_abline(intercept = 0, slope = 1) +
guides(color = guide_legend(title = "Quarter:"))
augment(regression_md) |>
ggplot(aes(x = value, y = .fitted,
color = factor(quarter(date)))) +
geom_point() +
labs(y = "Fitted",
x = "Values",
title = "GameStop Revenue in Quarter") +
geom_abline(intercept = 0, slope = 2) +
guides(color = guide_legend(title = "Quarter:"))
augment(regression_md) |>
ggplot(aes(x = value, y = .fitted,
color = factor(quarter(date)))) +
geom_point() +
labs(y = "Fitted",
x = "Values",
title = "GameStop Revenue in Quarter") +
geom_abline(intercept = 1, slope = 1) +
guides(color = guide_legend(title = "Quarter:"))
augment(regression_md) |>
ggplot(aes(x = value, y = .fitted,
color = factor(quarter(date)))) +
geom_point() +
labs(y = "Fitted",
x = "Values",
title = "GameStop Revenue in Quarter") +
geom_abline(intercept = 1, slope = 0) +
guides(color = guide_legend(title = "Quarter:"))
augment(regression_md) |>
ggplot(aes(x = value, y = .fitted,
color = factor(quarter(date)))) +
geom_point() +
labs(y = "Fitted",
x = "Values",
title = "GameStop Revenue in Quarter") +
geom_abline(intercept = 2, slope = 0) +
guides(color = guide_legend(title = "Quarter:"))
augment(regression_md) |>
ggplot(aes(x = value, y = .fitted,
color = factor(quarter(date)))) +
geom_point() +
labs(y = "Fitted",
x = "Values",
title = "GameStop Revenue in Quarter") +
geom_abline(intercept = 0, slope = 1) +
guides(color = guide_legend(title = "Quarter:"))
augment(regression_md) |>
ggplot(aes(x = value, y = .fitted,
color = factor(quarter(date)))) +
geom_point() +
labs(y = "Fitted",
x = "Values",
title = "GameStop Revenue in Quarter") +
geom_abline() +
guides(color = guide_legend(title = "Quarter:"))
augment(regression_md) |>
ggplot(aes(x = value, y = .fitted,
color = factor(quarter(date)))) +
geom_point() +
labs(y = "Fitted",
x = "Values",
title = "GameStop Revenue in Quarter") +
geom_hline() +
guides(color = guide_legend(title = "Quarter:"))
augment(regression_md) |>
ggplot(aes(x = value, y = .fitted,
color = factor(quarter(date)))) +
geom_point() +
labs(y = "Fitted",
x = "Values",
title = "GameStop Revenue in Quarter") +
geom_abline(intercept = 0, slope = 1) +
guides(color = guide_legend(title = "Quarter:"))
library(fpp3) # forcast package latest vers (tibble, dplyr, tidyr, lubridate, ggplot2, tsibble, feasts)
library(forecast) # forecas
View(quarter_revenue_tibble)
knitr::opts_chunk$set(message = FALSE, echo = FALSE)
# load the packages
library(readxl) # for reading xml type
library(fpp3) # package latest vers for time series models (tibble, dplyr, tidyr, lubridate, ggplot2, tsibble, feasts)
library(forecast) # # forecasting functions for ts and linear models
quarter_revenue_tibble |>
model(
NAIVE(value),
MEAN(value),
SNAIVE(value),
RW(value ~ drift())
)
test <- quarter_revenue_tibble |>
model(
NAIVE(value),
MEAN(value),
SNAIVE(value),
RW(value ~ drift())
)
test
rm(test)
quarter_revenue_tibble |>
model(
NAIVE(value),
MEAN(value),
SNAIVE(value),
RW(value ~ drift())
) |>
summary()
quarter_revenue_tibble |>
model(
NAIVE(value),
MEAN(value),
SNAIVE(value),
RW(value ~ drift())
) |>
head()
quarter_revenue_tibble |>
model(SNAIVE(value)) |>
gg_tsresiduals()
quarter_revenue_tibble |>
model(SNAIVE(value)) |>
gg_tsresiduals()
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# load the packages
library(readxl) # for reading xml type
library(fpp3) # package latest vers for time series models (tibble, dplyr, tidyr, lubridate, ggplot2, tsibble, feasts)
library(forecast) # # forecasting functions for ts and linear models
quarter_revenue_tibble |>
model(ETS(value)) |>
report()
quarter_revenue_tibble |>
strects_tsibble(.init = 15) |>
model(SNAIVE(value),
ETS(vallue)) |>
forecast(h = 5) |>
accuracy(quarter_revenue_tibble) |>
select(.model, RMSE:MAPE)
quarter_revenue_tibble |>
stretch_tsibble(.init = 15) |>
model(SNAIVE(value),
ETS(vallue)) |>
forecast(h = 5) |>
accuracy(quarter_revenue_tibble) |>
select(.model, RMSE:MAPE)
quarter_revenue_tibble |>
stretch_tsibble(.init = 15) |>
model(SNAIVE(value),
ETS(value)) |>
forecast(h = 5) |>
accuracy(quarter_revenue_tibble) |>
select(.model, RMSE:MAPE)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# load the packages
library(readr)
library(readxl) # for reading xml type
library(fpp3) # package latest vers for time series models (tibble, dplyr, tidyr, lubridate, ggplot2, tsibble, feasts)
library(forecast) # # forecasting functions for ts and linear models
# Finding the best ARIMA model
# using automate method and manualy
quarter_revenue_tibble |>
model(ARIMA(value)) |>
report()
quarter_revenue_tibble |>
model(ARIMA(value)) |>
gg_tsresiduals()
View(quarter_revenue_tibble)
View(quarter_revenue_tibble)
gg_season(quarter_revenue_tibble) +
labs(y = "US $ in Million",
title = "Check Seasonality of GameStop Revenue",
subtitle = "in every quarter report from Q1 2012 to Q2 2024")
# forecasting using arima model(0,0,1)(1,1,0)[4]
arima |>
forecast(h = 10) |>
autoplot(quarter_revenue_tibble) +
labs(y = "US $ in Million",
title = "GameStop Revenue Forcast",
subtitle = "Using ARIMA Model")
# forecasting using arima model(0,0,1)(1,1,0)[4]
quarter_revenue_tibble |>
model(ARIMA(value)) |>
forecast(h = 10) |>
autoplot(quarter_revenue_tibble) +
labs(y = "US $ in Million",
title = "GameStop Revenue Forcast",
subtitle = "Using ARIMA Model")
quarter_revenue_tibble |>
strectch_tsibble(.init = 10) |>
model(ARIMA(vallue)) |>
forecast(h = 10) |>
autoplot(quarter_revenue_tibble) |>
labs(title = "GameStop Revenue Forecast",
subtitle = "Using ARIMA (0,0,1)(1,1,0)[4]Drift",
y = "US $ in Million")
quarter_revenue_tibble |>
stretch_tsibble(.init = 10) |>
model(ARIMA(vallue)) |>
forecast(h = 10) |>
autoplot(quarter_revenue_tibble) |>
labs(title = "GameStop Revenue Forecast",
subtitle = "Using ARIMA (0,0,1)(1,1,0)[4]Drift",
y = "US $ in Million")
quarter_revenue_tibble |>
stretch_tsibble(.init = 10) |>
model(ARIMA(value)) |>
forecast(h = 10) |>
autoplot(quarter_revenue_tibble) |>
labs(title = "GameStop Revenue Forecast",
subtitle = "Using ARIMA (0,0,1)(1,1,0)[4]Drift",
y = "US $ in Million")
quarter_revenue_tibble |>
stretch_tsibble(.init = 10) |>
model(ARIMA(value)) |>
forecast(h = 5) |>
autoplot(quarter_revenue_tibble) |>
labs(title = "GameStop Revenue Forecast",
subtitle = "Using ARIMA (0,0,1)(1,1,0)[4]Drift",
y = "US $ in Million")
arima <- quarter_revenue_tibble |>
model(ARIMA(value))
arima |>
stretch_tsibble(.init = 15) |>
forecast(h = 5) |>
autoplot(quarter_revenue_tibble) |>
labs(title = "GameStop Revenue Forecast",
subtitle = "Using ARIMA (0,0,1)(1,1,0)[4]Drift",
y = "US $ in Million")
arima <- quarter_revenue_tibble |>
model(ARIMA(value)) |>
forecast(h = 5)
train <- quarter_revenue_tibble |>
filter_index("2012 Q1" ~ "2020 Q1")
arima |>
autoplot(train, level = NULL) +
autolayer(
filter_index(quarter_revenue_tibble, '2020 Q1' ~ .),
value,
color = "black"
) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
# Create model table (Mable) and forecast
test <- quarter_revenue_tibble |>
model(
mean = MEAN(value),
naive = NAIVE(value),
seasonal_naive = SNAIVE(value)
) |>
forecast(h = 14)
test |>
autoplot(train, level = NULL) +
autolayer(
filter_index(quarter_revenue_tibble, '2020 Q1' ~ .),
value,
color = "black"
) +
labs(
y = 'Revenue',
title = 'Forecast GameStop Revenue 10-Q',
subtitle = 'From 2012 - 2026',
color = 'Forecast Method'
)
# create data frame of all the benchmark models that we'll use
# Extract training data set
quarter_revenue_train <- quarter_revenue_tibble |>
filter_index(. ~ '2022 Q1')
# Create training data set
test <- quarter_revenue_train |>
model(
snaive = SNAIVE(value),
ets = ETS(value)
)
# Create test data set
test_fc <- test |>
forecast(h = 10)
# autoplot this two variable
test_fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Revenue forecast with ETS and SNAIVE model",
subtitle = "Against real data",
y = "US $ in Million",
x = "")
# create data frame of all the benchmark models that we'll use
# Extract training data set
quarter_revenue_train <- quarter_revenue_tibble |>
filter_index(. ~ '2022 Q1')
# Create training data set
test <- quarter_revenue_train |>
model(
snaive = SNAIVE(value),
ets = ETS(value)
)
# Create test data set
test_fc <- test |>
forecast(h = 10)
# autoplot this two variable
test_fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Revenue forecast with ETS and SNAIVE model",
subtitle = "Against real data",
y = "US $ in Million",
x = "")
rm(arima, quarter_revenue_train, test, regression_md, test, test_fc, test_train, train)
train <- quarter_revenue_tibble |>
filter_index(. ~ "2020 Q1")
# Create model table
arima <- quarter_revenue_tibble |>
model(ARIMA(value))
# forecast data using ARIMA model for the next 5 quarter report
fc <- arima |>
forecast(h = 5)
fc |>
auto_plot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
arima <- train |>
model(ARIMA(value))
fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
# Create train data
train <- quarter_revenue_tibble |>
filter_index(. ~ '2022 Q1')
# Create model table
arima <- train |>
model(ARIMA(value))
# forecast data using ARIMA model for the next 5 quarter report
fc <- arima |>
forecast(h = 10)
fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
train <- quarter_revenue_tibble |>
filter_index(. ~ "2022 Q1")
fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
train <- quarter_revenue_tibble |>
filter_index(. ~ "2022 Q1")
# forecast data using ARIMA model for the next 5 quarter report
fc <- arima |>
forecast(h = 5)
fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
arima <- train |>
model(ARIMA(value)) |>
forecast(h = 10)
fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
arima <- train |>
model(ARIMA(value)) |>
forecast(h = 15)
fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
# Create model table
arima <- train |>
model(ARIMA(value))
# forecast data using ARIMA model for the next 5 quarter report
fc <- arima |>
forecast(h = 10)
fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
sqrt(66606)
quarter_revenue_tibble |>
model(SNAIVE(value)) |>
report()
sqrt(87834)
quarter_revenue_tibble |>
model(ETS(value)) |>
report()
quarter_revenue_tibble |>
model(ARIMA(value)) |>
gg_tsresiduals(plot_type = "partial")
View(fc)
View(train)
View(quarter_revenue_tibble)
# Create train data
train <- quarter_revenue_tibble |>
filter_index(. ~ "2022 Q1")
# Create model table
arima <- train |>
model(ARIMA(value)) |>
# forecast data using ARIMA model for the next 5 quarter report
fc <- arima |>
forecast(h = 10)
# Create train data
train <- quarter_revenue_tibble |>
filter_index(. ~ "2022 Q1")
# Create model table
arima <- train |>
model(ARIMA(value))
# forecast data using ARIMA model for the next 5 quarter report
fc <- arima |>
forecast(h = 10)
fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
# Create train data
train <- quarter_revenue_tibble |>
filter_index(. ~ "2024 Q2")
# Create model table
arima <- train |>
model(ARIMA(value))
# forecast data using ARIMA model for the next 5 quarter report
fc <- arima |>
forecast(h = 10)
fc |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
View(fc)
# Create train data
train <- quarter_revenue_tibble |>
filter_index(. ~ "2024 Q2")|>
model(ARIMA(value)) |>
forecast(h = 10)
# Create train data
train <- quarter_revenue_tibble |>
filter_index(. ~ "2024 Q2")|>
model(ARIMA(value)) |>
forecast(h = 10)
train
# Create train data
train <- quarter_revenue_tibble |>
filter_index(. ~ "2024 Q2")|>
model(ARIMA(value)) |>
forecast(h = 10) |>
select(date, .mean) |>
rename(value = .mean)
# Create train data
quarter_revenue_tibble |>
filter_index(. ~ "2024 Q2")|>
model(ARIMA(value)) |>
forecast(h = 10)
# Create train data
quarter_revenue_tibble |>
filter_index(. ~ "2024 Q2")|>
model(ARIMA(value)) |>
forecast(h = 10) |>
select(date, .mean)
# Create train data
quarter_revenue_tibble |>
filter_index(. ~ "2022 Q1") |>
model(ARIMA(value))|>
forecast(h = 10) |>
autoplot(filter_index(quarter_revenue_tibble), level = NULL) +
labs(title = "GameStop Forecasting Revenue",
y = "USD in Million")
rm(arima, fc, train)
